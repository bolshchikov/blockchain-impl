package block

import (
	"crypto/sha256"
	"strconv"
	"strings"
	"time"
)

// Block is a atomic unit of a blockchain
type Block struct {
	Index     int
	Timestamp int64
	Hash      string
	PrevHash  string
	Data      string
	nonce     int
}

// CalculateHash returns the string hash generated by SHA256
func (b *Block) CalculateHash() string {
	hasher := sha256.New()
	hasher.Write([]byte(strconv.Itoa(b.Index)))
	hasher.Write([]byte(string(b.Timestamp)))
	hasher.Write([]byte(b.Data))
	hasher.Write([]byte(b.PrevHash))
	hasher.Write([]byte(strconv.Itoa(b.nonce)))
	return string(hasher.Sum(nil))
}

// MineBlock calculates the hash until it satisfies the difficulty
func (b *Block) MineBlock(difficulty int) {
	paddingZeros := strings.Repeat("0", difficulty)
	for b.Hash[0:difficulty] != paddingZeros {
		b.nonce++
		b.Hash = b.CalculateHash()
	}
}

// New creates instance of Block
func New(index int, data, prevHash string) *Block {
	timestamp := time.Now().Unix()
	nonce := 0
	block := Block{
		index,
		timestamp,
		"",
		prevHash,
		data,
		nonce,
	}
	block.Hash = block.CalculateHash()
	return &block
}
